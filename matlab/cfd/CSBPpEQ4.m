function [H,D,tL,tR,x]=CSBPpEQ4(N)
%==========================================================================
% Purpose: This function computes the classical FD SBP operator for p = 4
%          of degree = 4 for the first derivative with N nodes on
%          the domain [-1,1]
% Inputs:
%          N = number of nodes, the minimum is 10
%	   construction of the operators
%
% Outputs:
%           H = SBP norm
%           D = first derivative operator
%           tL = projection operator for the left boundary
%           tR = projection operator for the right boundary
%           x = nodal distribution for the operator
%
% Author: David C. Del Rey Fernandez January 2016
%
%==========================================================================

x = transpose(linspace(-1,1,N));
dx = 2/(N-1);

%==== norm matrix
H = dx*eye(N,N);
H(1:8,1:8)=dx*[0.1498139e7 / 0.5080320e7 0 0 0 0 0 0 0; 0 0.1107307e7 / 0.725760e6 0 0 0 0 0 0; 0 0 0.20761e5 / 0.80640e5 0 0 0 0 0; 0 0 0 0.1304999e7 / 0.725760e6 0 0 0 0; 0 0 0 0 0.299527e6 / 0.725760e6 0 0 0; 0 0 0 0 0 0.103097e6 / 0.80640e5 0 0; 0 0 0 0 0 0 0.670091e6 / 0.725760e6 0; 0 0 0 0 0 0 0 0.5127739e7 / 0.5080320e7;];
% lower poriton
for i=1:8
    for j=1:8
        H(N-(i-1),N-(j-1))=H(i,j);
    end
end
%==== first derivative
D = zeros(N,N);
D(1:8,1:12) = ...
1/dx*[-0.16955436044318985087e1 0.22608643633134057199e1 -0.85367286450337040510e-1 -0.72543619566628612342e0 0.48823202683514973173e-1 0.25327067381932511095e0 -0.20810689629510203502e-1 -0.35800463638213927868e-1 0 0 0 0; -0.43697896613650212786e0 0 0.11806727914744050659e0 0.45392741904037194207e0 -0.35451986191651692503e-1 -0.12132305827513695582e0 0.18087661820535829032e-2 0.19950546233424744611e-1 0 0 0 0; 0.97781066266206924562e-1 -0.69969186172211199969e0 0 0.65637393984777096907e0 0.11267082240058042461e0 -0.33428057204703250861e0 0.21873662397046339337e0 -0.51590018715877203296e-1 0 0 0 0; 0.11897154784237866703e0 -0.38516275383761760282e0 -0.93979240050464527405e-1 0 0.14570996944041065112e0 0.28170129505772535539e0 -0.52460610055305079395e-1 -0.14780208397127463918e-1 0 0 0 0; -0.34885452275029076031e-1 0.13106074735806541871e0 -0.70285585255172494490e-1 -0.63483881055720004975e0 0 0.78722564721145565674e0 -0.23448808805333871951e0 0.64865185483120361714e-1 -0.86536439119010973969e-2 0 0 0; -0.58418504934713186948e-1 0.14478476223520576322e0 0.67315236682623567235e-1 -0.39619636345602957631e0 -0.25412458001505128234e0 0 0.57501418139033112647e0 -0.10537842745121846328e0 0.29797181295285022843e-1 -0.27934857464329708915e-2 0 0; 0.66467104043362952119e-2 -0.29889365097445074233e-2 -0.60992789714019610153e-1 0.10216678579709781702e0 0.10481488864997796812e0 -0.79622041413657355988e0 0 0.82579717441770067391e0 -0.21661535522787203529e0 0.41260067662451816246e-1 -0.38681313433548577730e-2 0; 0.10459594529770367736e-1 -0.30157474178514931388e-1 0.13159172853630143210e-1 0.26330727879539228304e-1 -0.26522824364777175297e-1 0.13347882630163333279e0 -0.75540404471037239532e0 0 0.79260196355547737512e0 -0.19815049088886934378e0 0.37742950645498922625e-1 -0.35384016230155239961e-2;];
% interior of D1
for i=9:N-8
    D(i,i-4:i+4)=1/dx*[1/280, -4/105, 1/5, -4/5, 0, 4/5, -1/5, 4/105, -1/280];
end
% the lower portion of D1
for i=1:12
    for j=1:12
        D(N-(i-1),N-(j-1))=-D(i,j);
    end
end

%===== matrices necessary for the SATs
tL = zeros(N,1);
tL(1,1)=1;
tR = zeros(N,1);
tR(N,1)=1;