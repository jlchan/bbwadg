function [int,wmsg] = integrate(fitobj,x,x0)
%INTEGRATE  Integrate a fit result object.
%   INT = INTEGRATE(FITOBJ, X, X0) integrates the model FITOBJ at the points
%   specified by X starting from X0 and returns the result in INT. FITOBJ is a
%   cfit object generated by the FIT or CFIT function. X is a column vector.
%   X0 is a scalar. INT is a column vector.
%
%   See also CFIT/DIFFERENTIATE, FIT, CFIT.

%   Copyright 1999-2012 The MathWorks, Inc.

if nargin < 3
    error(message('curvefit:integrate:threeInputArgsRequired'));
end

if ~isa(fitobj,'cfit')
    error(message('curvefit:integrate:invalidFirstArg'));
end

% Get handle to integral function.
integH = integexpr( fitobj ); 

% If there is no function to do the integration ...
if isempty( integH )
    % ... then we need to use numerical integration
    int = iIntegrateNumerically( fitobj, x, x0 );
else
    % ... otherwise we defer to the given function
    int = iIntegrateByFormula( fitobj, x, x0, integH );
end

if nargout > 1
    wmsg = '';
    warning( message( 'curvefit:integrate:noSecondOutput' ) );
end
end

function int = iIntegrateNumerically( fitobj, x, x0 )
% iIntegrateNumerically   Perform integration numerically

% It is not necessary to center and scale X here, because that is done within
% evaluation calls via the function handle
f = iGetFunctionHandle( fitobj );

int = zeros( size( x ) );
[x, idx] = sort( x(:) );
int(1) = integral( f, x0, x(1) );
for i = 2:numel( x )
    int(i) = int(i-1) + integral( f, x(i-1), x(i) );
end
int(idx) = int;
end

function f = iGetFunctionHandle( fitobj )
% iGetFunctionHandle   Handle to a function that evaluates a CFIT
f = @(x) reshape( feval( fitobj, x ), size( x ) );
end

function int = iIntegrateByFormula( fitobj, x, x0, integH )
% iIntegrateByFormula   Perform integration using the integral handle (either
% from library or customer)

% Center and scale X if necessary, then adjust result at the end
xin = ([x0;x(:)] - fitobj.meanx) / fitobj.stdx;
h = constants(fitobj);
int = feval(integH,fitobj.coeffValues{:},fitobj.probValues{:},h{:},xin);
int = fitobj.stdx * (int(2:end)-int(1));
int = reshape( int, size( x ) );
end
